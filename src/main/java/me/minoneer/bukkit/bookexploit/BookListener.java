package me.minoneer.bukkit.bookexploit;

import org.bukkit.Material;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.inventory.InventoryCreativeEvent;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.EquipmentSlot;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.jetbrains.annotations.NotNull;

import java.util.logging.Level;
import java.util.logging.Logger;

public final class BookListener implements Listener {

    private final ConfigHandler config;
    private final BookFilter bookFilter;
    private final Logger logger;

    public BookListener(@NotNull ConfigHandler config, @NotNull BookFilter bookFilter, @NotNull Logger logger) {
        this.config = config;
        this.bookFilter = bookFilter;
        this.logger = logger;
    }

    @EventHandler(priority = EventPriority.LOW)
    public void onBookEdit(@NotNull final PlayerEditBookEvent event) {
        if (!config.isOnCreation()) {
            return;
        }

        final BookMeta filteredBookMeta = bookFilter.filterBookMeta(event.getNewBookMeta());
        if (filteredBookMeta != null) {
            logger.log(Level.WARNING, "Player {0} tried to create a book with illegal click events!", event.getPlayer());
            event.setNewBookMeta(filteredBookMeta);
        }
    }

    @EventHandler(priority = EventPriority.LOW)
    public void onBookRead(@NotNull final PlayerInteractEvent event) {
        final Player player = event.getPlayer();
        if (!config.isOnRead()) {
            return;
        }
        if (event.getAction() != Action.RIGHT_CLICK_AIR && event.getAction() != Action.RIGHT_CLICK_BLOCK) {
            return;
        }
        if (event.getItem() == null || event.getItem().getType() != Material.WRITTEN_BOOK) {
            return;
        }
        if (player.hasPermission("bookfilter.overridefilter")) {
            return;
        }
        if (config.isDebug()) {
            logger.log(Level.INFO, "Filtering read ItemStack: {0}", event.getItem());
        }

        final ItemStack toFilter;
        if (event.getHand() == EquipmentSlot.OFF_HAND) {
            toFilter = player.getInventory().getItemInOffHand();
        } else {
            toFilter = player.getInventory().getItemInMainHand();
        }

        final ItemStack filtered = bookFilter.filterBook(toFilter);

        if (filtered != null) {
            logger.log(Level.WARNING, "Player {0} tried to read a book with illegal click events!", player);
            event.setCancelled(true);

            if (event.getHand() == EquipmentSlot.OFF_HAND) {
                player.getInventory().setItemInOffHand(filtered);
            } else {
                player.getInventory().setItemInMainHand(filtered);
            }
            player.updateInventory();

            for (final String line : config.getChatWarning()) {
                player.sendMessage(line);
            }
        }
    }

    @EventHandler(priority = EventPriority.LOW)
    public void onCreativeInventory(@NotNull final InventoryCreativeEvent event) {
        if (!config.isOnCreativeInventory()) {
            return;
        }
        final HumanEntity clicker = event.getWhoClicked();
        if (!(clicker instanceof Player)) {
            return;
        }
        final Player player = (Player) clicker;
        if (player.hasPermission("bookfilter.overridefilter")) {
            return;
        }
        final ItemStack eventItem = event.getCurrentItem();
        final ItemStack filteredEventItem = bookFilter.filterBook(eventItem);
        if (filteredEventItem != null) {
            logger.log(Level.WARNING, "Player {0} has a book with illegal click events!", player);
            event.setCurrentItem(filteredEventItem);
        }

        final ItemStack cursorItem = event.getCurrentItem();
        final ItemStack filteredCursorItem = bookFilter.filterBook(cursorItem);
        if (filteredCursorItem != null) {
            logger.log(Level.WARNING, "Player {0} has a book with illegal click events!", player);
            event.setCursor(filteredCursorItem);
        }
    }
}
