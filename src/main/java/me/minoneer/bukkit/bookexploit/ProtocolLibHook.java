package me.minoneer.bukkit.bookexploit;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.google.gson.JsonParseException;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

public final class ProtocolLibHook {

    public static void activate(
            final Plugin plugin,
            final BookFilter bookFilter,
            final ConfigHandler config,
            final Logger logger
    ) {
        BukkitScheduler scheduler = plugin.getServer().getScheduler();
        ProtocolManager manager = ProtocolLibrary.getProtocolManager();
        manager.addPacketListener(new PacketAdapter(plugin, ListenerPriority.LOW,
                PacketType.Play.Client.SET_CREATIVE_SLOT
        ) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                final Player player = event.getPlayer();
                ItemStack item = event.getPacket().getItemModifier().readSafely(0);
                try {
                    ItemStack filteredItem = bookFilter.filterBook(item, player, FilterAction.CREATE);

                    if (filteredItem != null) {
                        event.setCancelled(true);
                        event.getPlayer().updateInventory();
                        logger.log(
                                Level.WARNING,
                                "Player {0} {1} tried to create a book with illegal click events!",
                                new Object[]{player.getName(), player.getUniqueId()}
                        );
                        if (config.getPlayerMessage() != null) {
                            player.sendMessage(config.getPlayerMessage());
                        }
                    }
                } catch (JsonParseException exception) { // thrown if the book pages contain invalid JSON
                    logger.warning(
                            "Detected a book with invalid page content that could not be parsed in inventory of " +
                                    "player " + player.getName() + " (" + player.getUniqueId() + "). Removing the item."
                    );
                    logger.warning("Invalid book: " + exception.getMessage());
                    event.setCancelled(true);

                    // Kick player synchronously
                    UUID playerId = player.getUniqueId();
                    scheduler.runTask(plugin, () -> {
                        Player syncPlayer = plugin.getServer().getPlayer(playerId);
                        if (syncPlayer != null) {
                            syncPlayer.kickPlayer("Invalid book content detected, please contact an administrator.");
                        }
                    });
                }
            }
        });
    }
}
