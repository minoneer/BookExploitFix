package me.minoneer.bukkit.bookexploit;

import net.md_5.bungee.api.chat.BaseComponent;
import net.md_5.bungee.api.chat.ClickEvent;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

public final class BookFilter {

    private final Logger logger;
    private final Set<ClickEvent.Action> filterActions;
    private final ConfigHandler config;

    public BookFilter(
            @NotNull final Set<ClickEvent.Action> filterActions,
            @NotNull final ConfigHandler config,
            @NotNull final Logger logger
    ) {
        this.filterActions = filterActions;
        this.config = config;
        this.logger = logger;
    }

    @Nullable
    public ItemStack filterBook(@Nullable final ItemStack originalItem, @NotNull final Player player) {

        if (originalItem == null) {
            return null;
        }

        if (originalItem.getType() != Material.WRITTEN_BOOK && originalItem.getType() != Material.WRITABLE_BOOK) {
            return null;
        }

        ItemStack newItem = originalItem.clone();

        ItemMeta itemMeta = newItem.getItemMeta();
        if (!(itemMeta instanceof BookMeta)) {
            return null;
        }

        final BookMeta filteredBookMeta = filterBookMeta((BookMeta) itemMeta, player);

        if (filteredBookMeta != null) {
            newItem.setItemMeta(filteredBookMeta);
            return newItem;
        } else {
            return null;
        }
    }

    @Nullable
    public BookMeta filterBookMeta(@NotNull final BookMeta bookMeta, @NotNull final Player player) {
        if (config.isWorldDisabled(player.getWorld())) {
            return null;
        }

        // Spigot returns an anonymous object inheriting from AbstractList, which lazily parses each page on access.
        // This has the side-effect that each get(i) method returns a new object parsed from the original, overwriting
        // any modifications to the old reference. Since we need all pages anyway, we just store them in a regular list.
        final List<BaseComponent[]> pages = new ArrayList<>(bookMeta.spigot().getPages());
        boolean bookFiltered = false;
        for (final BaseComponent[] page : pages) {
            final boolean pageFiltered = filterPage(page);
            bookFiltered = bookFiltered || pageFiltered;
        }
        if (bookFiltered) {
            bookMeta.spigot().setPages(pages);
            return bookMeta;
        } else {
            return null;
        }
    }

    private boolean filterPage(@NotNull final BaseComponent[] page) {
        boolean pageFiltered = false;
        for (final BaseComponent component : page) {
            final boolean componentFiltered = filterComponent(component);
            pageFiltered = pageFiltered || componentFiltered;
        }
        return pageFiltered;
    }

    private boolean filterComponent(@NotNull final BaseComponent component) {
        boolean componentFiltered = false;
        final ClickEvent clickEvent = component.getClickEvent();
        if (clickEvent != null && this.filterActions.contains(clickEvent.getAction())) {
            component.setClickEvent(null);
            componentFiltered = true;
            logger.log(Level.WARNING, "Filtered illegal content from item!");
            logger.log(Level.WARNING, BookExploitFix.limitLoggingString(clickEvent.toString()));
        }
        final List<BaseComponent> extra = component.getExtra();
        if (extra != null) {
            for (final BaseComponent subComponent : extra) {
                final boolean subComponentFiltered = filterComponent(subComponent);
                componentFiltered = componentFiltered || subComponentFiltered;
            }
        }
        return componentFiltered;
    }
}
