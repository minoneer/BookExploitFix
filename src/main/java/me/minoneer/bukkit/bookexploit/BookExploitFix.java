package me.minoneer.bukkit.bookexploit;

import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;
import org.jetbrains.annotations.Nullable;

import java.util.Objects;
import java.util.logging.Level;

public final class BookExploitFix extends JavaPlugin {

    @Override
    public void onDisable() {
        getLogger().log(Level.INFO, "{0} by minoneer deactivated", getDescription().getFullName());
    }

    @Override
    public void onEnable() {
        final ConfigHandler config = loadConfig();

        final BookFilter filter = new BookFilter(config.getFilterActions(), config, getLogger());

        registerCommands(filter);

        registerEvents(config, filter);

        registerLecternEvents(config, filter);

        enableProtocolLib(config, filter);

        getLogger().log(Level.INFO, "{0} by minoneer activated", getDescription().getFullName());
    }

    private ConfigHandler loadConfig() {
        return new ConfigHandler(this);
    }

    private void registerCommands(final BookFilter filter) {
        Objects.requireNonNull(getCommand("filter")).setExecutor(new FilterCommand(filter));
    }

    private void registerEvents(final ConfigHandler config, final BookFilter filter) {
        final BookListener listener = new BookListener(config, filter, getLogger());
        Bukkit.getPluginManager().registerEvents(listener, this);
    }

    private void enableProtocolLib(ConfigHandler config, BookFilter filter) {
        if (getServer().getPluginManager().isPluginEnabled("ProtocolLib")) {
            getLogger().info("Found ProtocolLib, enabling advanced protection features.");
            ProtocolLibHook.activate(this, filter, config, getLogger());
        } else {
            getLogger().warning("Missing ProtocolLib dependency, some protections are not available.");
        }
    }

    private void registerLecternEvents(ConfigHandler config, BookFilter filter) {
        Version minLecternVersion = new Version(1, 14, 0);
        Version serverVersion = Version.parseVersion(getServer().getBukkitVersion());
        final boolean enableLectern;
        if (serverVersion != null) {
            enableLectern = minLecternVersion.compareTo(serverVersion) <= 0;
        } else {
            enableLectern = false;
            getLogger().severe("Unable to parse server version " + getServer().getBukkitVersion() +
                    ", lectern support will not be enabled.");
        }

        if (enableLectern) {
            getLogger().info("Detected server version 1.14 or higher, enabling lectern support");
            getServer().getPluginManager().registerEvents(new LecternListener(config, filter, getLogger()), this);
        }
    }

    @Nullable
    public static String limitLoggingString(@Nullable final String input) {
        if (input == null) {
            return null;
        } else {
            return input.substring(0, Math.min(1500, input.length()));
        }
    }
}
