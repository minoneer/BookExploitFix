package me.minoneer.bukkit.bookexploit;

import net.md_5.bungee.api.chat.ClickEvent;
import org.bukkit.ChatColor;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.NotNull;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public final class ConfigHandler extends AbstractConfigHandler {
    private static final String PATH_FILTER = "click_action_filter";
    private static final String PATH_WARNING = "chat_warning";
    private static final String PATH_ON_CREATION = "activate.on_creation";
    private static final String PATH_ON_READ = "activate.on_read";
    private static final String PATH_DEBUG = "log_debug";

    private static final List<String> DEF_FILTER = Arrays.asList(
            "RUN_COMMAND",
            "SUGGEST_COMMAND",
            "OPEN_FILE",
            "OPEN_URL"
    );
    private static final List<String> DEF_WARNING = Arrays.asList(
            "  ==== WARNING ==== WARNING ==== WARNING ====",
            "",
            "  DO NOT CLICK ON ANYTHING IN THIS BOOK!",
            "",
            "  It contains illegal code and is potentially harmful",
            "",
            "  ==== WARNING ==== WARNING ==== WARNING ===="
    );

    private final Logger logger;

    private Set<ClickEvent.Action> filterActions;
    private List<String> chatWarning;
    private boolean onCreation;
    private boolean onRead;
    private boolean debug;

    public ConfigHandler(@NotNull final Plugin plugin) {
        super(plugin);
        this.logger = plugin.getLogger();
    }

    @Override
    protected void loadData() {
        List<String> actions = config.getStringList(PATH_FILTER);
        filterActions = EnumSet.noneOf(ClickEvent.Action.class);

        for (String actionString : actions) {
            try {
                filterActions.add(ClickEvent.Action.valueOf(actionString.toUpperCase()));
            } catch (IllegalArgumentException e) {
                logger.log(Level.WARNING, "Invalid ActionEnum: {0}", actionString.toUpperCase());
            }
        }

        chatWarning = new ArrayList<>(config.getStringList(PATH_WARNING));
        for (int i = 0; i < getChatWarning().size(); i++) {
            getChatWarning().set(i, ChatColor.RED + ChatColor.translateAlternateColorCodes('&', getChatWarning().get(i)));
        }

        onCreation = config.getBoolean(PATH_ON_CREATION);

        onRead = config.getBoolean(PATH_ON_READ);

        debug = config.getBoolean(PATH_DEBUG);
    }

    @Override
    protected void addDefaults() {
        config.addDefault(PATH_FILTER, DEF_FILTER);
        config.addDefault(PATH_WARNING, DEF_WARNING);
        config.addDefault(PATH_ON_CREATION, true);
        config.addDefault(PATH_ON_READ, false);
        config.addDefault(PATH_DEBUG, false);
    }

    @NotNull
    public Set<ClickEvent.Action> getFilterActions() {
        return filterActions;
    }

    @NotNull
    public List<String> getChatWarning() {
        return chatWarning;
    }

    public boolean isOnCreation() {
        return onCreation;
    }

    public boolean isOnRead() {
        return onRead;
    }

    public boolean isDebug() {
        return debug;
    }
}
