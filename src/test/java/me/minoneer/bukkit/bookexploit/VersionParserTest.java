package me.minoneer.bukkit.bookexploit;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class VersionParserTest {

    @Test
    public void testFullVersion() {
        Version expected = new Version(1, 14, 4);
        String version = "1.14.4-R0.1-SNAPSHOT";

        assertEquals(expected, Version.parseVersion(version));
    }

    @Test
    public void testMajorMinorVersion() {
        Version expected = new Version(1, 14, 0);
        String version = "1.14-R0.1-SNAPSHOT";

        assertEquals(expected, Version.parseVersion(version));
    }

    @Test
    public void testMajorVersion() {
        Version expected = new Version(2, 0, 0);
        String version = "2-R0.1-SNAPSHOT";

        assertEquals(expected, Version.parseVersion(version));
    }

    @Test
    public void testAllKnownVersions() {
        var versions = List.of(
                "1.13-R0.1-SNAPSHOT",
                "1.13.1-R0.1-SNAPSHOT",
                "1.13.2-R0.1-SNAPSHOT",
                "1.14-R0.1-SNAPSHOT",
                "1.14.1-R0.1-SNAPSHOT",
                "1.14.2-R0.1-SNAPSHOT",
                "1.14.3-R0.1-SNAPSHOT",
                "1.14.4-R0.1-SNAPSHOT",
                "1.15-R0.1-SNAPSHOT",
                "1.15.1-R0.1-SNAPSHOT",
                "1.15.2-R0.1-SNAPSHOT",
                "1.16.1-R0.1-SNAPSHOT",
                "1.16.2-R0.1-SNAPSHOT",
                "1.16.3-R0.1-SNAPSHOT",
                "1.16.4-R0.1-SNAPSHOT",
                "1.16.5-R0.1-SNAPSHOT",
                "1.17-R0.1-SNAPSHOT"
        );
        var expected = List.of(
                new Version(1, 13, 0),
                new Version(1, 13, 1),
                new Version(1, 13, 2),
                new Version(1, 14, 0),
                new Version(1, 14, 1),
                new Version(1, 14, 2),
                new Version(1, 14, 3),
                new Version(1, 14, 4),
                new Version(1, 15, 0),
                new Version(1, 15, 1),
                new Version(1, 15, 2),
                new Version(1, 16, 1),
                new Version(1, 16, 2),
                new Version(1, 16, 3),
                new Version(1, 16, 4),
                new Version(1, 16, 5),
                new Version(1, 17, 0)
        );

        for (int i = 0; i < versions.size(); i++) {
            assertEquals(expected.get(i), Version.parseVersion(versions.get(i)),
                    "Test parsing of version " + versions.get(i));
        }
    }
}
